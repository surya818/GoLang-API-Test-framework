name: Test Kong Control Plane

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-app:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Go
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.4  # Update to your Go version
    # Step 3: Install gofumpt
    - name: Install gofumpt
      run: go install mvdan.cc/gofumpt@latest        
   # Step 4: Add Go tools to PATH
    - name: Add Go tools to PATH
      run: echo "${{ runner.tool_cache }}/go/bin" >> $GITHUB_PATH
    # Step 5: Set up Docker
    - name: Ensure Docker is running
      run: |
        sudo systemctl start docker
        docker --version

    # Step 6: Build and start the application
    - name: Build and start application
      run: make docker-run &

    # Step 7: Wait for the app to start on port 18080
    - name: Wait for the app to start on port 18080
      run: |
        for i in {1..20}; do
          if nc -zv localhost 18080; then
            echo "Application is running on port 18080"
            exit 0
          fi
          echo "Waiting for application to start..."
          sleep 10
        done
        echo "Application failed to start on port 18080"
        exit 1

    # Step 9: List test files
    - name: List Test files
      run: ls -lRa test
      
    - name: Install go-junit-report
      run: go install github.com/jstemmer/go-junit-report@latest

    - name: Install JUnit-Report-Generator (for HTML)
      run: |
        npm install -g junit-report-generator      

    - name: Install Dependencies
      run: go mod tidy

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest
      
    - name: Run tests and generate JSON report
      run: |
        go test -json ./... > test_results.json

    - name: Convert JSON to JUnit XML
      run: |
        cat test_results.json | go-junit-report > junit_report.xml

    - name: Generate HTML report from JUnit XML
      run: |
        junit-report-generator junit_report.xml --output report.html

    - name: Upload JUnit XML report as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: junit-report
        path: junit_report.xml

    - name: Upload HTML report as artifact
      if: always()    
      uses: actions/upload-artifact@v3
      with:
        name: html-test-report
        path: report.html   
